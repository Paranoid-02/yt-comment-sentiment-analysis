pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'eu-north-1'
        GITHUB_REPO_URL = 'https://github.com/Paranoid-02/yt-comment-sentiment-analysis.git'
        GIT_USERNAME = 'Paranoid-02'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }
        
        stage('Setup Python') {
            steps {
                script {
                    // Check for Python installation and install if missing
                    def pythonInstalled = sh(script: 'command -v python3 || command -v python', returnStatus: true) == 0
                    
                    if (!pythonInstalled) {
                        if (isUnix()) {
                            sh 'sudo apt-get update && sudo apt-get install -y python3 python3-venv'
                        } else {
                            bat 'choco install python -y'
                        }
                    }
                    
                    // Create virtual environment
                    sh 'python3 -m venv venv || python -m venv venv'
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh '''
                    # Create fresh virtual environment
                    python3 -m venv venv --clear
                    . venv/bin/activate
                    
                    # Install core dependencies FIRST
                    pip install --upgrade pip wheel setuptools
                    pip install numpy pandas scipy scikit-learn matplotlib seaborn
                    pip install -r requirements.txt
                    
                    # Install DVC with AWS/S3 support
                    pip install 'dvc[s3]>=3.0.0'  # The quotes prevent shell interpretation
                    
                    # Verify installation
                    dvc --version || { echo "❌ DVC installation failed"; exit 1; }
                    which dvc
                '''
            }
        }

        stage('Run DVC Pipeline') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        # MUST activate the same venv
                        . venv/bin/activate
                        
                        # Debugging info
                        echo "Python path: $(which python)"
                        echo "DVC path: $(which dvc)"
                        dvc doctor  # Check DVC environment
                        
                        # Run pipeline
                        dvc pull || echo "⚠️ DVC pull failed (first run?)"
                        dvc repro
                        dvc push
                    '''
                }
            }
        }

        stage('Test Model') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''#!/bin/bash
                        . venv/bin/activate
                        
                        # Install pytest if missing
                        pip install pytest || true
                        
                        # Run tests
                        pytest -v --junitxml=test-results.xml \\
                            scripts/test_load_model.py \\
                            scripts/test_model_signature.py \\
                            scripts/test_model_performance.py
                    '''
                }
                junit 'test-results.xml'
            }
        }

        stage('Git Versioning') {
            when {
                expression { 
                    !env.GIT_COMMITTER_NAME?.contains('Jenkins') 
                }
            }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'github-credentials',
                    usernameVariable: 'GIT_USER',
                    passwordVariable: 'GIT_TOKEN'
                )]) {
                    sh '''#!/bin/bash
                        git config user.name "Jenkins CI"
                        git config user.email "jenkins@mlops.com"
                        
                        if [ -n "$(git status --porcelain)" ]; then
                            echo "📌 Changes detected - committing..."
                            git add .
                            git commit -m "[Jenkins] Update DVC tracking (Build ${BUILD_NUMBER})" || exit 0
                            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/Paranoid-02/yt-comment-sentiment-analysis.git HEAD:main
                            echo "✅ Successfully pushed changes"
                        else
                            echo "🔄 No changes to commit"
                        fi
                    '''
                }
            }
        }

        stage('Deploy & Test Flask API') {
            environment {
                FLASK_ENV = 'production'
                FLASK_APP = 'flask_app/app.py'
            }
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        # Start Flask app in background
                        nohup python -m flask run --host=0.0.0.0 --port=5000 > flask.log 2>&1 &
                        echo $! > flask.pid  # Save PID for later cleanup
                        
                        # Wait for app to start (max 30 seconds)
                        timeout 30 bash -c 'until curl -s http://localhost:5000/healthcheck; do sleep 1; done'
                        
                        # Run API tests
                        pytest scripts/test_flask_api.py -v --junitxml=api-test-results.xml
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}