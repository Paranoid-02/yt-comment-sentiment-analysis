pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.11.11'
        AWS_DEFAULT_REGION = 'eu-north-1'
        GITHUB_REPO_URL = 'https://github.com/Paranoid-02/yt-comment-sentiment-analysis.git'
        GIT_USERNAME = 'Paranoid-02'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }
        
        stage('Setup Python') {
            steps {
                sh '''
                    # Update existing pyenv or install if missing
                    if [ -d "$HOME/.pyenv" ]; then
                        echo "Updating existing pyenv..."
                        cd "$HOME/.pyenv" && git pull
                    else
                        echo "Installing pyenv..."
                        curl -fsSL https://pyenv.run | bash
                    fi
                    
                    export PYENV_ROOT="$HOME/.pyenv"
                    export PATH="$PYENV_ROOT/bin:$PATH"
                    eval "$(pyenv init --path)"
                    eval "$(pyenv virtualenv-init -)"
                    
                    # Rest of the installation steps...
                '''.stripIndent()
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh """
                    . venv/bin/activate
                    pip install -r requirements.txt \
                        mlflow==2.15.0 \
                        numpy==1.26.4 \
                        pandas==2.2.2 \
                        scikit-learn==1.5.1 \
                        lightgbm==4.5.0 \
                        matplotlib==3.9.1
                """
            }
        }

        stage('Run DVC Pipeline') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        # MUST activate the same venv
                        . venv/bin/activate
                        
                        # Debugging info
                        echo "Python path: $(which python)"
                        echo "DVC path: $(which dvc)"
                        dvc doctor  # Check DVC environment
                        
                        # Run pipeline
                        dvc pull || echo "⚠️ DVC pull failed (first run?)"
                        dvc repro
                        dvc push
                    '''
                }
            }
        }

        stage('Test Model') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''#!/bin/bash
                        . venv/bin/activate
                        
                        # Install pytest if missing
                        pip install pytest || true
                        
                        # Run tests
                        pytest -v --junitxml=test-results.xml \\
                            scripts/test_load_model.py \\
                            scripts/test_model_signature.py \\
                            scripts/test_model_performance.py
                    '''
                }
                junit 'test-results.xml'
            }
        }

        stage('Git Versioning') {
            when {
                expression { 
                    !env.GIT_COMMITTER_NAME?.contains('Jenkins') 
                }
            }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'github-credentials',
                    usernameVariable: 'GIT_USER',
                    passwordVariable: 'GIT_TOKEN'
                )]) {
                    sh '''#!/bin/bash
                        git config user.name "Jenkins CI"
                        git config user.email "jenkins@mlops.com"
                        
                        if [ -n "$(git status --porcelain)" ]; then
                            echo "📌 Changes detected - committing..."
                            git add .
                            git commit -m "[Jenkins] Update DVC tracking (Build ${BUILD_NUMBER})" || exit 0
                            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/Paranoid-02/yt-comment-sentiment-analysis.git HEAD:main
                            echo "✅ Successfully pushed changes"
                        else
                            echo "🔄 No changes to commit"
                        fi
                    '''
                }
            }
        }

        stage('Deploy & Test Flask API') {
            environment {
                FLASK_ENV = 'production'
                FLASK_APP = 'flask_app/app.py'
            }
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        . venv/bin/activate
                        # Start Flask app in background
                        nohup python -m flask run --host=0.0.0.0 --port=5050 > flask.log 2>&1 &
                        echo $! > flask.pid  # Save PID for later cleanup
                        
                        # Wait for app to start (max 30 seconds)
                        echo "Waiting for Flask API to start..."
                        sleep 30
                        
                        # Run API tests
                        pytest scripts/test_flask_api.py -v --junitxml=api-test-results.xml
                    '''
                }
            }
            post {
                always {
                    sh '''
                        # Stop Flask app
                        [ -f flask.pid ] && kill $(cat flask.pid) || true
                        rm -f flask.pid
                    '''
                    junit 'api-test-results.xml'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DockerHubCred',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh '''
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker build -t $DOCKER_USER/yt-comment-sentiment-analysis:latest .
                        docker push $DOCKER_USER/yt-comment-sentiment-analysis:latest   
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                        kubectl apply -f kubernetes/deployment.yaml
                        kubectl apply -f kubernetes/service.yaml
                        
                        # Verify deployment
                        kubectl rollout status deployment/yt-comment-analysis
                    '''
                }
            }
        }

        stage('Deploy ELK Stack') {
            steps {
                dir('kubernetes/elk') {
                    sh '''
                        kubectl apply -f elasticsearch.yaml
                        kubectl apply -f kibana.yaml
                        
                        # Wait for Elasticsearch to be ready
                        kubectl wait --for=condition=ready pod -l elasticsearch.k8s.elastic.co/cluster-name=elasticsearch --timeout=300s
                        
                        kubectl apply -f filebeat.yaml
                    '''
                }
            }
        }

        stage('Verify ELK Stack') {
            steps {
                script {
                    // Get Kibana URL
                    def kibana_url = sh(returnStdout: true, script: """
                        minikube service kibana-kb-http --url || \\
                        kubectl get svc kibana-kb-http -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:5601'
                    """).trim()
                    
                    echo "Kibana Dashboard available at: ${kibana_url}"
                    
                    // Simple log check
                    sh '''
                        sleep 30 # Wait for logs to populate
                        kubectl exec -it $(kubectl get pods -l app=yt-comment-analysis -o jsonpath='{.items[0].metadata.name}') -- \\
                            curl -s http://elasticsearch-es-http:9200/_cat/indices?v
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}