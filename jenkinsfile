pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.11.11'
        AWS_DEFAULT_REGION = 'eu-north-1'
        GITHUB_REPO_URL = 'https://github.com/Paranoid-02/yt-comment-sentiment-analysis.git'
        GIT_USERNAME = 'Paranoid-02'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }
        
        stage('Setup Python') {
            steps {
                sh '''
                    # Install pyenv if not present
                    if ! command -v pyenv &> /dev/null; then
                        curl https://pyenv.run | bash
                        export PATH="$HOME/.pyenv/bin:$PATH"
                        eval "$(pyenv init -)"
                        eval "$(pyenv virtualenv-init -)"
                    fi
                    
                    # Install specific Python version
                    pyenv install ${PYTHON_VERSION} --skip-existing
                    pyenv global ${PYTHON_VERSION}
                    
                    # Create virtual environment
                    python -m venv venv
                    . venv/bin/activate
                    
                    python --version
                    pip install --upgrade pip
                '''.stripIndent()
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh """
                    . venv/bin/activate
                    pip install -r requirements.txt \
                        mlflow==2.15.0 \
                        numpy==1.26.4 \
                        pandas==2.2.2 \
                        scikit-learn==1.5.1 \
                        lightgbm==4.5.0 \
                        matplotlib==3.9.1
                """
            }
        }

        stage('Run DVC Pipeline') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        # MUST activate the same venv
                        . venv/bin/activate
                        
                        # Debugging info
                        echo "Python path: $(which python)"
                        echo "DVC path: $(which dvc)"
                        dvc doctor  # Check DVC environment
                        
                        # Run pipeline
                        dvc pull || echo "⚠️ DVC pull failed (first run?)"
                        dvc repro
                        dvc push
                    '''
                }
            }
        }

        stage('Test Model') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''#!/bin/bash
                        . venv/bin/activate
                        
                        # Install pytest if missing
                        pip install pytest || true
                        
                        # Run tests
                        pytest -v --junitxml=test-results.xml \\
                            scripts/test_load_model.py \\
                            scripts/test_model_signature.py \\
                            scripts/test_model_performance.py
                    '''
                }
                junit 'test-results.xml'
            }
        }

        stage('Git Versioning') {
            when {
                expression { 
                    !env.GIT_COMMITTER_NAME?.contains('Jenkins') 
                }
            }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'github-credentials',
                    usernameVariable: 'GIT_USER',
                    passwordVariable: 'GIT_TOKEN'
                )]) {
                    sh '''#!/bin/bash
                        git config user.name "Jenkins CI"
                        git config user.email "jenkins@mlops.com"
                        
                        if [ -n "$(git status --porcelain)" ]; then
                            echo "📌 Changes detected - committing..."
                            git add .
                            git commit -m "[Jenkins] Update DVC tracking (Build ${BUILD_NUMBER})" || exit 0
                            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/Paranoid-02/yt-comment-sentiment-analysis.git HEAD:main
                            echo "✅ Successfully pushed changes"
                        else
                            echo "🔄 No changes to commit"
                        fi
                    '''
                }
            }
        }

        stage('Deploy & Test Flask API') {
            environment {
                FLASK_APP = 'flask_app/app.py'
                FLASK_ENV = 'production'
                MLFLOW_TRACKING_URI = 'http://ec2-16-171-182-207.eu-north-1.compute.amazonaws.com:5000/'
                VECTORIZER_PATH = "${WORKSPACE}/flask_app/tfidf_vectorizer.pkl"
            }
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                    file(credentialsId: 'tfidf-vectorizer', variable: 'VECTORIZER_FILE')
                ]) {
                    sh '''#!/bin/bash
                        . venv/bin/activate
                        
                        # Setup directories and copy vectorizer
                        mkdir -p "${WORKSPACE}/flask_app"
                        cp -v "${VECTORIZER_FILE}" "${VECTORIZER_PATH}"
                        
                        # Start Flask server in background
                        nohup python -m flask run --host=0.0.0.0 --port=5000 > flask.log 2>&1 &
                        echo $! > flask.pid
                        
                        # Wait for server to start
                        sleep 10
                        
                        # Run API tests
                        pytest scripts/test_flask_api.py -v --junitxml=api-test-results.xml
                    '''
                }
            }
        }
    }

    post {
        always {
                sh '''
                    [ -f flask.pid ] && kill $(cat flask.pid) || true
                    rm -f flask.pid
                    echo "----- Server Logs -----"
                    cat flask.log
                '''
                junit 'api-test-results.xml'
                archiveArtifacts 'flask.log'
            }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}