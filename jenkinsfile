pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'eu-north-1'
        GITHUB_REPO_URL = 'https://github.com/Paranoid-02/yt-comment-sentiment-analysis.git'
        GIT_USERNAME = 'Paranoid-02'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }
        
        stage('Setup Python') {
            steps {
                script {
                    // Check for Python installation and install if missing
                    def pythonInstalled = sh(script: 'command -v python3 || command -v python', returnStatus: true) == 0
                    
                    if (!pythonInstalled) {
                        if (isUnix()) {
                            sh 'sudo apt-get update && sudo apt-get install -y python3 python3-venv'
                        } else {
                            bat 'choco install python -y'
                        }
                    }
                    
                    // Create virtual environment
                    sh 'python3 -m venv venv || python -m venv venv'
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh '''
                    # Create fresh virtual environment
                    python3 -m venv venv --clear
                    . venv/bin/activate
                    
                    # Install core dependencies FIRST
                    pip install --upgrade pip wheel setuptools
                    pip install numpy pandas scipy scikit-learn matplotlib seaborn
                    pip install -r requirements.txt
                    
                    # Install DVC with AWS/S3 support
                    pip install 'dvc[s3]>=3.0.0'  # The quotes prevent shell interpretation
                    
                    # Verify installation
                    dvc --version || { echo "❌ DVC installation failed"; exit 1; }
                    which dvc
                '''
            }
        }

        stage('Run DVC Pipeline') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        # MUST activate the same venv
                        . venv/bin/activate
                        
                        # Debugging info
                        echo "Python path: $(which python)"
                        echo "DVC path: $(which dvc)"
                        dvc doctor  # Check DVC environment
                        
                        # Run pipeline
                        dvc pull || echo "⚠️ DVC pull failed (first run?)"
                        dvc repro
                        dvc push
                    '''
                }
            }
        }

        stage('Test Model') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh """
                        #!/bin/bash -e
                        # Use python/pytest from venv explicitly
                        echo "Running model tests using venv..."
                        PYTHON_EXEC=$(pwd)/venv/bin/python
                        PIP_EXEC=$(pwd)/venv/bin/pip
                        PYTEST_EXEC=$(pwd)/venv/bin/pytest

                        # Verify pytest is installed
                        if ! \${PIP_EXEC} show pytest &> /dev/null; then
                            echo "pytest not found, installing..."
                            \${PIP_EXEC} install pytest
                        fi

                        echo "Running pytest..."
                        # Execute pytest, pointing to the test files
                        # -v for verbose output
                        # --junitxml generates report for Jenkins
                        # Pass AWS credentials as env vars (already done by withCredentials)
                        \${PYTEST_EXEC} -v --junitxml=test-results.xml test_load_model.py test_model_signature.py test_model_performance.py

                        echo "✅ Model tests finished."
                    """ // End sh block
                } // End withCredentials

                // Publish test results (requires JUnit plugin in Jenkins)
                // This step runs outside the sh block but after it completes
                junit 'test-results.xml'
            }
        }

        stage('Git Versioning') {
            when {
                expression {
                    !env.GIT_COMMITTER_NAME?.contains('Jenkins')
                }
            }
            steps {
                // Use the CORRECT credential ('github-credentials') of type 'Username with password'
                withCredentials([usernamePassword(
                    credentialsId: 'github-credentials',      // Credential ID in Jenkins
                    usernameVariable: 'UNUSED_USERNAME',      // Variable for username (can ignore if using env.GIT_USERNAME)
                    passwordVariable: 'GH_TOKEN_FROM_CRED'    // Variable for the password (PAT) - USE THIS!
                )]) {
                    // Use DOUBLE QUOTES (""") and escape shell dollar signs (\$)
                    sh """
                        # Configure Git
                        git config --global user.name "Jenkins CI"
                        git config --global user.email "jenkins@mlops.com" # Change this email

                        # Debug: Verify the token variable is set inside shell
                        echo "DEBUG SHELL: GH_TOKEN_FROM_CRED variable is set."
                        if [ -z "\${GH_TOKEN_FROM_CRED}" ]; then
                           echo "ERROR SHELL: GH_TOKEN_FROM_CRED is empty!"
                           exit 1 # Fail if token is unexpectedly empty
                        fi

                        # Debug: Show remote URL and changes
                        git remote -v
                        git status --porcelain

                        # Only proceed if there are changes
                        # Escape \$ for shell command substitution
                        if [ -n "\$(git status --porcelain)" ]; then
                            echo "📌 Changes detected - committing..."
                            git add .
                            # Escape \$ for shell environment variable
                            git commit -m "[Jenkins] Update DVC tracking (Build \${BUILD_NUMBER})" || echo "Commit failed or nothing to commit, continuing..."

                            # Push using authenticated URL
                            # Use environment GIT_USERNAME and the token from withCredentials
                            echo "Attempting git push..."
                            git push https://\${GIT_USERNAME}:\${GH_TOKEN_FROM_CRED}@github.com/Paranoid-02/yt-comment-sentiment-analysis.git HEAD:main

                            echo "✅ Successfully pushed changes"
                        else
                            echo "🔄 No changes to commit"
                        fi
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}