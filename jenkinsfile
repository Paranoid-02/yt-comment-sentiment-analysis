pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'eu-north-1'
        GITHUB_REPO_URL = 'https://github.com/Paranoid-02/yt-comment-sentiment-analysis.git'
        GIT_USERNAME = 'Paranoid-02'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }
        
        stage('Setup Python') {
            steps {
                sh '''
                    python3.11 -m venv venv
                    . venv/bin/activate
                    python --version
                '''
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh '''
                    # Create fresh virtual environment
                    python3 -m venv venv --clear
                    . venv/bin/activate
                    
                    # Install core dependencies FIRST
                    pip install --upgrade pip wheel setuptools
                    pip install numpy pandas scipy scikit-learn matplotlib seaborn
                    pip install -r requirements.txt
                    
                    # Install DVC with AWS/S3 support
                    pip install 'dvc[s3]>=3.0.0'  # The quotes prevent shell interpretation
                    
                    # Verify installation
                    dvc --version || { echo "‚ùå DVC installation failed"; exit 1; }
                    which dvc
                '''
            }
        }

        stage('Run DVC Pipeline') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        # MUST activate the same venv
                        . venv/bin/activate
                        
                        # Debugging info
                        echo "Python path: $(which python)"
                        echo "DVC path: $(which dvc)"
                        dvc doctor  # Check DVC environment
                        
                        # Run pipeline
                        dvc pull || echo "‚ö†Ô∏è DVC pull failed (first run?)"
                        dvc repro
                        dvc push
                    '''
                }
            }
        }

        stage('Test Model') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''#!/bin/bash
                        . venv/bin/activate
                        
                        # Install pytest if missing
                        pip install pytest || true
                        
                        # Run tests
                        pytest -v --junitxml=test-results.xml \\
                            scripts/test_load_model.py \\
                            scripts/test_model_signature.py \\
                            scripts/test_model_performance.py
                    '''
                }
                junit 'test-results.xml'
            }
        }

        stage('Git Versioning') {
            when {
                expression { 
                    !env.GIT_COMMITTER_NAME?.contains('Jenkins') 
                }
            }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'github-credentials',
                    usernameVariable: 'GIT_USER',
                    passwordVariable: 'GIT_TOKEN'
                )]) {
                    sh '''#!/bin/bash
                        git config user.name "Jenkins CI"
                        git config user.email "jenkins@mlops.com"
                        
                        if [ -n "$(git status --porcelain)" ]; then
                            echo "üìå Changes detected - committing..."
                            git add .
                            git commit -m "[Jenkins] Update DVC tracking (Build ${BUILD_NUMBER})" || exit 0
                            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/Paranoid-02/yt-comment-sentiment-analysis.git HEAD:main
                            echo "‚úÖ Successfully pushed changes"
                        else
                            echo "üîÑ No changes to commit"
                        fi
                    '''
                }
            }
        }

    stage('Deploy & Test Flask API') {
        environment {
            FLASK_APP = 'flask_app/app.py'
            FLASK_ENV = 'production'
            MLFLOW_TRACKING_URI = 'http://ec2-13-51-160-69.eu-north-1.compute.amazonaws.com:5000/'
            VECTORIZER_PATH = "${WORKSPACE}/flask_app/tfidf_vectorizer.pkl"
        }
        steps {
            withCredentials([
                string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                file(credentialsId: 'tfidf-vectorizer', variable: 'VECTORIZER_FILE')
            ]) {
                sh '''#!/bin/bash
                    . venv/bin/activate

                    # 1. Debug workspace structure
                    echo "Current workspace:"
                    pwd
                    ls -la
                    echo "Jenkins workspace: ${WORKSPACE}"
                    
                    # 2. Create target directory if needed
                    mkdir -p "${WORKSPACE}/flask_app"
                    
                    # 3. Copy vectorizer with verification
                    echo "Copying vectorizer from ${VECTORIZER_FILE} to ${VECTORIZER_PATH}"
                    cp -v "${VECTORIZER_FILE}" "${VECTORIZER_PATH}" || {
                        echo "‚ùå Failed to copy vectorizer";
                        ls -la "${WORKSPACE}/flask_app/";
                        exit 1;
                    }
                    
                    # 4. Verify file copy
                    echo "Vectorizer copy verification:"
                    ls -la "${VECTORIZER_PATH}"
                    file "${VECTORIZER_PATH}"
                    python -c "
    import joblib;
    try:
        v = joblib.load('${VECTORIZER_PATH}');
        print(f'‚úÖ Vectorizer loaded successfully. Type: {type(v)}')
    except Exception as e:
        print(f'‚ùå Vectorizer load failed: {str(e)}');
        raise SystemExit(1)
    "
                    
                    # 5. Install requirements
                    pip install -r requirements.txt
                    
                    # 6. Start Flask with absolute paths
                    echo "Starting Flask..."
                    nohup python -c "
    import os, sys;
    sys.path.append('${WORKSPACE}');
    os.environ['AWS_ACCESS_KEY_ID']='${AWS_ACCESS_KEY_ID}';
    os.environ['AWS_SECRET_ACCESS_KEY']='${AWS_SECRET_ACCESS_KEY}';
    os.environ['VECTORIZER_PATH']='${VECTORIZER_PATH}';
    from flask_app.app import app;
    app.run(host='0.0.0.0', port=5000, debug=False)
    " > flask.log 2>&1 &
                    echo $! > flask.pid
                    
                    # 7. Healthcheck with retries
                    echo "Waiting for model initialization..."
                    for i in {1..30}; do
                        if curl -s http://localhost:5000/healthcheck | grep -q "Model Loaded"; then
                            echo "‚úÖ Model ready after $i seconds"
                            break
                        fi
                        sleep 1
                        [ $i -eq 30 ] && { 
                            echo "‚ùå Model load timeout"; 
                            echo "----- Flask Logs -----";
                            cat flask.log;
                            echo "----- End Logs -----";
                            exit 1; 
                        }
                    done
                    
                    # 8. Run tests with debug output
                    python -m pytest scripts/test_flask_api.py -v \
                        --junitxml=api-test-results.xml \
                        --log-cli-level=DEBUG \
                        --cov=flask_app \
                        --cov-report=xml:coverage.xml
                '''
                }
            }
        }
    }

    post {
        always {
                sh '''
                    [ -f flask.pid ] && kill $(cat flask.pid) || true
                    rm -f flask.pid
                    echo "----- Server Logs -----"
                    cat flask.log
                '''
                junit 'api-test-results.xml'
                archiveArtifacts 'flask.log'
            }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}