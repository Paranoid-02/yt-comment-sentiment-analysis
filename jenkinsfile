pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.11.11'
        AWS_DEFAULT_REGION = 'eu-north-1'
        GITHUB_REPO_URL = 'https://github.com/Paranoid-02/yt-comment-sentiment-analysis.git'
        GIT_USERNAME = 'Paranoid-02'
        NGROK_AUTH_TOKEN = credentials('ngrok-auth-token')
        SERVICE_NAME = 'yt-comment-service'
        NAMESPACE = 'default'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }
        
        stage('Setup Python') {
            steps {
                sh '''
                    # Update existing pyenv or install if missing
                    if [ -d "$HOME/.pyenv" ]; then
                        echo "Updating existing pyenv..."
                        cd "$HOME/.pyenv" && git pull
                    else
                        echo "Installing pyenv..."
                        curl -fsSL https://pyenv.run | bash
                    fi
                    
                    export PYENV_ROOT="$HOME/.pyenv"
                    export PATH="$PYENV_ROOT/bin:$PATH"
                    eval "$(pyenv init --path)"
                    eval "$(pyenv virtualenv-init -)"
                    
                    # Rest of the installation steps...
                '''.stripIndent()
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh """
                    . venv/bin/activate
                    pip install -r requirements.txt \
                        mlflow==2.15.0 \
                        numpy==1.26.4 \
                        pandas==2.2.2 \
                        scikit-learn==1.5.1 \
                        lightgbm==4.5.0 \
                        matplotlib==3.9.1
                """
            }
        }

        stage('Run DVC Pipeline') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        # MUST activate the same venv
                        . venv/bin/activate
                        
                        # Debugging info
                        echo "Python path: $(which python)"
                        echo "DVC path: $(which dvc)"
                        dvc doctor  # Check DVC environment
                        
                        # Run pipeline
                        dvc pull || echo "⚠️ DVC pull failed (first run?)"
                        dvc repro
                        dvc push
                    '''
                }
            }
        }

        // stage('Test Model') {
        //     steps {
        //         withCredentials([
        //             string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
        //             string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
        //         ]) {
        //             sh '''#!/bin/bash
        //                 . venv/bin/activate
                        
        //                 # Install pytest if missing
        //                 pip install pytest || true
                        
        //                 # Run tests
        //                 pytest -v --junitxml=test-results.xml \\
        //                     scripts/test_load_model.py \\
        //                     scripts/test_model_signature.py \\
        //                     scripts/test_model_performance.py
        //             '''
        //         }
        //         junit 'test-results.xml'
        //     }
        // }

        stage('Git Versioning') {
            when {
                expression { 
                    !env.GIT_COMMITTER_NAME?.contains('Jenkins') 
                }
            }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'github-credentials',
                    usernameVariable: 'GIT_USER',
                    passwordVariable: 'GIT_TOKEN'
                )]) {
                    sh '''#!/bin/bash
                        git config user.name "Jenkins CI"
                        git config user.email "jenkins@mlops.com"
                        
                        if [ -n "$(git status --porcelain)" ]; then
                            echo "📌 Changes detected - committing..."
                            git add .
                            git commit -m "[Jenkins] Update DVC tracking (Build ${BUILD_NUMBER})" || exit 0
                            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/Paranoid-02/yt-comment-sentiment-analysis.git HEAD:main
                            echo "✅ Successfully pushed changes"
                        else
                            echo "🔄 No changes to commit"
                        fi
                    '''
                }
            }
        }

        stage('Deploy & Test Flask API') {
            environment {
                FLASK_ENV = 'production'
                FLASK_APP = 'flask_app/app.py'
            }
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        . venv/bin/activate
                        pip install prometheus-client || true

                        # Start Flask app in background
                        nohup python -m flask run --host=0.0.0.0 --port=5000 > flask.log 2>&1 &
                        echo $! > flask.pid  # Save PID for later cleanup
                        
                        # Wait for app to start (max 30 seconds)
                        echo "Waiting for Flask API to start..."
                        sleep 20
                        
                        # Run API tests
                        pytest scripts/test_flask_api.py -v --junitxml=api-test-results.xml
                    '''
                }
            }
            post {
                always {
                    sh '''
                        # Stop Flask app
                        [ -f flask.pid ] && kill $(cat flask.pid) || true
                        rm -f flask.pid
                    '''
                    junit 'api-test-results.xml'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DockerHubCred',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh '''
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker build -t $DOCKER_USER/yt-comment-sentiment-analysis:latest .
                        docker push $DOCKER_USER/yt-comment-sentiment-analysis:latest   
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes Via Ansible') {
            steps {
                withCredentials([
                    sshUserPrivateKey(
                        credentialsId: 'jenkins-ssh-key',
                        keyFileVariable: 'SSH_KEY'
                    ),
                    usernamePassword(
                        credentialsId: 'DockerHubCred',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )
                ]) {
                    dir('ansible') {
                        sh '''
                            # Install required packages if needed
                            pip install ansible==8.6.1 kubernetes==29.0.0 openshift==0.13.1

                            # Activate the virtual environment
                            . ../venv/bin/activate

                            # Print debug info
                            echo "PATH: $PATH"
                            which minikube
                            which ansible-playbook
                            
                            # Run Ansible with proper image name
                            ansible-playbook -i inventory.ini playbook.yaml \
                                --extra-vars "image_name=${DOCKER_USER}/yt-comment-sentiment-analysis:latest"
                            
                            # Verify deployment
                            kubectl get deployments -l app=yt-comment-analysis
                            kubectl get pods -l app=yt-comment-analysis
                        '''
                    }
                }
            }
        }

        // stage('Verify Deployment') {
        //     steps {
        //         script {
        //             // 1. Basic Kubernetes verification
        //             sh """
        //                 kubectl rollout status deployment/yt-comment-deployment -n ${NAMESPACE} --timeout=180s
        //                 kubectl get pods -l app=yt-comment-analysis -n ${NAMESPACE} -o wide
        //             """
                    
        //             // 2. Ngrok testing
        //             def SERVICE_PORT = sh(returnStdout: true, script: """
        //                 kubectl get svc ${SERVICE_NAME} -n ${NAMESPACE} \
        //                 -o jsonpath='{.spec.ports[0].nodePort}'
        //             """).trim()
                    
        //             withEnv(["NGROK_PORT=${SERVICE_PORT}"]) {
        //                 sh '''
        //                     ./ngrok http ${NGROK_PORT} --log=stdout --authtoken=${NGROK_AUTH_TOKEN} > ngrok.log &
        //                     sleep 5
        //                     NGROK_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        //                     echo "Testing endpoint: ${NGROK_URL}/predict"
                            
        //                     # Run test cases
        //                     curl -X POST "${NGROK_URL}/predict" \
        //                         -H "Content-Type: application/json" \
        //                         -d '{"text":"Great content!"}'
                            
        //                     # Verify response format
        //                     curl -s "${NGROK_URL}/healthcheck" | grep -q "Model Loaded"
                            
        //                     # Save URL for artifact
        //                     echo "Public Test URL: ${NGROK_URL}" > ngrok_url.txt
        //                 '''
        //             }
                    
        //             // 3. Load test results
        //             def NGROK_URL = readFile('ngrok_url.txt').trim()
        //             currentBuild.description = "Public Test URL: ${NGROK_URL}"
        //         }
        //     }
        //     post {
        //         always {
        //             sh 'pkill ngrok || true'
        //             archiveArtifacts artifacts: 'ngrok.log,ngrok_url.txt', fingerprint: true
        //         }
        //     }
        // }

        stage('Verify with Ngrok') {
            steps {
                script {
                    // Get the cluster IP and port
                    def SERVICE_PORT = sh(returnStdout: true, script: """
                        kubectl get svc ${SERVICE_NAME} -n ${NAMESPACE} \
                        -o jsonpath='{.spec.ports[0].nodePort}'
                    """).trim()
                    
                    // Start ngrok tunnel
                    withEnv(["NGROK_PORT=${SERVICE_PORT}"]) {
                        sh '''
                            # Install jq if needed
                            if ! command -v jq &> /dev/null; then
                                sudo apt-get update
                                sudo apt-get install -y jq
                            fi
                            
                            # Install ngrok if needed
                            if ! command -v ngrok &> /dev/null; then
                                curl -s https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -o ngrok.zip
                                unzip ngrok.zip
                                chmod +x ngrok
                                sudo mv ngrok /usr/local/bin/
                            fi
                            
                            # Start ngrok in background
                            nohup ngrok http ${NGROK_PORT} --log=stdout --authtoken=${NGROK_AUTH_TOKEN} > ngrok.log &
                            sleep 5  # Wait for ngrok to start
                            
                            # Get public URL
                            NGROK_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
                            echo "Ngrok Public URL: ${NGROK_URL}"
                            
                            # Test the API through ngrok
                            curl -X POST "${NGROK_URL}/predict" \
                                -H "Content-Type: application/json" \
                                -d '{"text":"This is a test comment"}'
                            
                            # Save URL for later use
                            echo "NGROK_URL=${NGROK_URL}" > ngrok.env
                        '''
                    }
                    
                    // Load the ngrok URL
                    def NGROK_URL = readFile('ngrok.env').trim()
                    
                    // Additional verification steps
                    sh """
                        # Test positive sentiment
                        curl -s -X POST "${NGROK_URL}/predict" \
                            -H "Content-Type: application/json" \
                            -d '{"text":"I love this video!"}' | grep -q '"sentiment":"positive"'
                        
                        # Test negative sentiment
                        curl -s -X POST "${NGROK_URL}/predict" \
                            -H "Content-Type: application/json" \
                            -d '{"text":"This is terrible"}' | grep -q '"sentiment":"negative"'
                    """
                }
            }
            post {
                always {
                    // Clean up ngrok process
                    sh 'pkill ngrok || true'
                    archiveArtifacts 'ngrok.log'
                }
            }
        }

        // stage('Deploy Monitoring') {
        //     steps {
        //         dir('kubernetes/monitoring') {
        //             sh '''
        //                 # Apply RBAC first
        //                 kubectl apply -f prometheus-rbac.yaml
                        
        //                 # Install Operator
        //                 kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.68.0/bundle.yaml
        //                 sleep 10 # Wait for CRDs to register
                        
        //                 # Deploy our monitoring stack
        //                 kubectl apply -f prometheus-configmap.yaml
        //                 kubectl apply -f prometheus-deployment.yaml
        //                 kubectl apply -f grafana-deployment.yaml
        //                 kubectl apply -f flask-service-monitor.yaml
                        
        //                 # Verify
        //                 kubectl get servicemonitors
        //                 kubectl get prometheuses
        //             '''
        //         }
        //     }
        // }

        // stage('Configure Grafana') {
        //     steps {
        //         script {
        //             // Get Grafana URL
        //             def grafana_url = sh(returnStdout: true, script: """
        //                 minikube service grafana --url || \\
        //                 kubectl get svc grafana -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:3000'
        //             """).trim()
                    
        //             // Import dashboard (using API)
        //             sh """
        //                 curl -X POST \
        //                 -H "Content-Type: application/json" \
        //                 -d @kubernetes/monitoring/grafana-dashboards/flask-metrics-dashboard.json \
        //                 "${grafana_url}/api/dashboards/import"
        //             """
                    
        //             echo "Grafana Dashboard available at: ${grafana_url}"
        //         }
        //     }
        // }

        // stage('Verify Monitoring') {
        //     steps {
        //         sh '''
        //             # Check Prometheus is scraping
        //             kubectl exec -it $(kubectl get pods -l app=prometheus -o jsonpath='{.items[0].metadata.name}') -- \\
        //                 curl -s http://localhost:9090/api/v1/targets | grep flask-app
                    
        //             # Make test request to generate metrics
        //             APP_URL=$(kubectl get svc yt-comment-service -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:80')
        //             curl -X POST "${APP_URL}/predict" -H "Content-Type: application/json" -d '{"text":"sample"}'
                    
        //             # Check metrics endpoint
        //             curl -s "${APP_URL}/metrics" | grep flask_app_request_count
        //         '''
        //     }
        // }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}