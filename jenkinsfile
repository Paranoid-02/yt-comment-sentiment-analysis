pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'eu-north-1'
        GITHUB_REPO_URL = 'https://github.com/Paranoid-02/yt-comment-sentiment-analysis.git'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }
        
        stage('Setup Python') {
            steps {
                script {
                    // Check for Python installation and install if missing
                    def pythonInstalled = sh(script: 'command -v python3 || command -v python', returnStatus: true) == 0
                    
                    if (!pythonInstalled) {
                        if (isUnix()) {
                            sh 'sudo apt-get update && sudo apt-get install -y python3 python3-venv'
                        } else {
                            bat 'choco install python -y'
                        }
                    }
                    
                    // Create virtual environment
                    sh 'python3 -m venv venv || python -m venv venv'
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh '''
                    # Create fresh virtual environment
                    python3 -m venv venv --clear
                    . venv/bin/activate
                    
                    # Install core dependencies FIRST
                    pip install --upgrade pip wheel setuptools
                    pip install numpy pandas scipy scikit-learn matplotlib seaborn
                    pip install -r requirements.txt
                    
                    # Install DVC with AWS/S3 support
                    pip install 'dvc[s3]>=3.0.0'  # The quotes prevent shell interpretation
                    
                    # Verify installation
                    dvc --version || { echo "‚ùå DVC installation failed"; exit 1; }
                    which dvc
                '''
            }
        }

        stage('Run DVC Pipeline') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        # MUST activate the same venv
                        . venv/bin/activate
                        
                        # Debugging info
                        echo "Python path: $(which python)"
                        echo "DVC path: $(which dvc)"
                        dvc doctor  # Check DVC environment
                        
                        # Run pipeline
                        dvc pull || echo "‚ö†Ô∏è DVC pull failed (first run?)"
                        dvc repro
                        dvc push
                    '''
                }
            }
        }

        stage('Git Versioning') {
            when { 
                expression { 
                    !env.GIT_COMMITTER_NAME?.contains('Jenkins') 
                }
            }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'github-credentials',
                    usernameVariable: 'Paranoid-02',
                    passwordVariable: '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'
                )]) {
                    sh '''
                        # Configure Git (essential in Docker)
                        git config --global user.name "Jenkins CI"
                        git config --global user.email "jenkins@mlops.com"

                        # Debug: Show remote URL and changes
                        git remote -v
                        git status --porcelain

                        # Only proceed if there are changes
                        if [ -n "$(git status --porcelain)" ]; then
                            echo "üìå Changes detected - committing..."
                            git add .
                            git commit -m "[Jenkins] Update DVC tracking (Build ${BUILD_NUMBER})" || exit 0

                            # Push using authenticated URL (CRITICAL FIX)
                            git push https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/Paranoid-02/yt-comment-sentiment-analysis.git HEAD:main

                            echo "‚úÖ Successfully pushed changes"
                        else
                            echo "üîÑ No changes to commit"
                        fi
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}