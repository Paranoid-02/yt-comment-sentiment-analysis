---
- hosts: localhost
  connection: local
  vars:
    image_name: "{{ image_name }}"
    minikube_driver: "docker"  # Match your existing driver
  tasks:
    - name: Check Minikube status
      command: minikube status -o json
      register: minikube_status
      ignore_errors: yes
      changed_when: false

    - name: Parse Minikube status
      set_fact:
        minikube_healthy: "{{ (minikube_status.stdout | from_json).Host == 'Running' 
                              and (minikube_status.stdout | from_json).Kubelet == 'Running'
                              and (minikube_status.stdout | from_json).APIServer == 'Running' }}"
      when: minikube_status.stdout != ""

    - name: Delete and recreate cluster if unhealthy
      block:
        - name: Delete existing cluster
          command: minikube delete
          async: 60
          poll: 5

        - name: Start Minikube
          command: minikube start --driver={{ minikube_driver }}
          async: 300
          poll: 10
          register: minikube_start
          until: minikube_start.finished
          retries: 3
      when: not minikube_healthy|default(False)

    - name: Verify full cluster health
      command: minikube status -o json
      register: health_check
      until: "(health_check.stdout | from_json).APIServer == 'Running'"
      retries: 10
      delay: 10

    - name: Enable registry addon
      command: minikube addons enable registry
      register: addon_result
      changed_when: "'was successfully enabled' in addon_result.stdout"

    - name: Configure Docker environment
      shell: |
        eval $(minikube -p minikube docker-env)
        docker ps
      args:
        executable: /bin/bash

    - name: Apply manifests using kubectl
      command: "kubectl apply -f ../kubernetes/{{ item }}.yaml"
      loop:
        - deployment.yaml
        - service.yaml
      register: apply_result
      retries: 3
      delay: 5
      until: apply_result.rc == 0