---
- hosts: localhost
  connection: local
  vars:
    image_name: "{{ image_name }}"
    k8s_namespace: "default"
  tasks:
    - name: Debug variables
      debug:
        msg: "Using image: {{ image_name }} in namespace: {{ k8s_namespace }}"
      
    - name: Check Minikube status
      command: minikube status -o json
      register: minikube_status
      ignore_errors: yes
      changed_when: false

    # Ensure namespace exists
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        name: "{{ k8s_namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    # Create the AWS credentials secret
    - name: Create AWS credentials secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: app-secrets
            namespace: "{{ k8s_namespace }}"
          type: Opaque
          stringData:
            aws-access-key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws-secret: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

    - name: Process deployment template
      template:
        src: deployment.yaml.j2
        dest: ../kubernetes/deployment-processed.yaml

    # Apply deployments with explicit namespace
    - name: Apply Kubernetes deployment
      kubernetes.core.k8s:
        state: present
        namespace: "{{ k8s_namespace }}"
        src: "../kubernetes/deployment-processed.yaml"
      register: deploy_result

    # Apply service with explicit namespace
    - name: Apply Kubernetes service
      kubernetes.core.k8s:
        state: present
        namespace: "{{ k8s_namespace }}"
        src: "../kubernetes/service.yaml"
      register: service_result

    - name: Verify deployment
      command: kubectl rollout status deployment/yt-comment-deployment -n {{ k8s_namespace }} --timeout=120s